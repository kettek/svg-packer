class {
  onCreate() {
    this.state = {
      replaceStrokeChecked: true,
      replaceFillChecked: true,
      replaceStroke: 'fillColor',
      replaceFill: 'fillColor',
      nodes: [],
      exportSource: '',
      exportDataURL: '',
    }
    this.exportDivElement = document.createElement('div')
    this.exportSVGElement = null
  }
  onMount() {
    this.state.exportSource = this.input.source
    this.exportDivElement.innerHTML = this.state.exportSource
    this.exportSVGElement = this.exportDivElement.getElementsByTagName('svg')[0]
    console.log(this.exportSVGElement)

    this.state.nodes = Array.from(this.exportSVGElement.children)
    console.log(this.state.nodes)

    this.state.exportDataURL = `data:image/svg+xml;base64,${window.btoa(this.exportDivElement.innerHTML)}`
  }
  handleClose() {
    this.emit('close')
  }
  handleStrokeChange(e) {
    this.state.replaceStroke = e.target.value
    this.syncSVG()
  }
  handleFillChange(e) {
    this.state.replaceFill = e.target.value
    this.syncSVG()
  }
  syncSVG() {
    this.state.exportDataURL = `data:image/svg+xml;base64,${window.btoa(this.exportDivElement.innerHTML)}`
    this.forceUpdate()
  }
  handleNodeHide(node) {
    if (node.style.visibility == 'hidden') {
      node.style.visibility = ''
    } else {
      node.style.visibility = 'hidden'
    }
    this.syncSVG()
  }
  handleNodeStyleChange(node, style, event) {
    console.log(event.target.value)
    node.style[style] = event.target.value
    this.syncSVG()
  }
}

style {
  .import {
    width: 100%;
    height: 100%;
    display: grid;
    grid-template-columns: 25% 1fr 25%;
  }
  .import_image, .export_image {
    padding: 1em;
    background-image: linear-gradient(45deg, #444 25%, transparent 25%, transparent 75%, #444 75%), linear-gradient(45deg, #444 25%, #333 25%, #333 75%, #444 75%);
    background-size: 30vmin 30vmin;
    background-position: 0 0, 15vmin 15vmin;
  }
  .import_image {
    display: grid;
    grid-template-rows: auto 1fr;
  }
  .export_image {
    display: grid;
    grid-template-rows: 1fr auto;
  }
  .import_image img, .export_image img {
    width: 100%;
    height: 100%;
  }
  .import_structure {
    padding: .5em;
    display: flex;
    flex-direction: column;
  }
  .import_tree {
  }
  .import_tree_list {
  }
  .import_open, .import_export {
    font-family: 'Major Mono Display', monospace;
    padding: .5em;
    background: linear-gradient(135deg, #0000ff 0%, #00ff00 50%, #ff0000 100%);
    text-transform: uppercase;
    font-size: 1.15rem;
    color: #fff;
    border: 0;
    box-shadow: 0 0 0.25rem #000;
    text-shadow: 0 0 0.25rem #000;
  }
}

Modal title="Customize Import" on-close('handleClose')
  div.import
    div.import_image
      button.import_open -- open SVG
      if(input.dataURL)
        img src=input.dataURL
    div.import_structure
      macro|{node}| name="SVGNode"
        div.import_node
          input type='checkbox' checked=(node.style.visibility!='hidden') on-input('handleNodeHide', node)
          div.import_node_selector -- ${node.tagName+(node.id?'#'+node.id:'')+(node.classList.length?Array.prototype.join.call(node.classList, '.'):'')}
          for|style| of=Array.from(node.style)
            if(style == 'fill')
              label
                span -- replace fill
                input value=node.style[style] placeholder=node.style[style] on-change('handleNodeStyleChange', node, style)
            else-if(style == 'stroke')
              label
                span -- replace stroke
                input value=node.style[style] placeholder=node.style[style] on-change('handleNodeStyleChange', node, style)
          div.import_node_children
            for|element| of=Array.from(node.children)
              SVGNode node=element
      ol
        for|node| of=state.nodes
          SVGNode node=node
      label
        input type='checkbox' checked=state.replaceStrokeChecked
        label
          span -- replace stroke:
          input type='text' value=state.replaceStroke on-input('handleStrokeChange')
      label
        input type='checkbox' checked=state.replaceFillChecked
        label
          span -- replace fill:
          input type='text' value=state.replaceFill on-input('handleFillChange')
    div.export_image
      if(state.exportDataURL)
        img src=state.exportDataURL
      button.import_export -- export into SVG Stack